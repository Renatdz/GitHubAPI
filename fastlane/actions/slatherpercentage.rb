require 'nokogiri'

module Fastlane
  module Actions
    module SharedValues
      CODE_COVERAGE = :CODE_COVERAGE
    end

    class SlatherpercentageAction < Action
      def self.run(params)
        puts "Calculating Code Coverage"...
        filename = params[:filename]

        doc = Nokogiri::HTML(open(filename))
        linerate = doc.css('span#total_coverage').text
        puts linerate

        Actions.lane_context[SharedValues::CODE_COVERAGE] = linerate.to_s
      end

      #####################################################
      # @!group Documentation
      #####################################################

      def self.description
        "It gets the total_coverage from HTML report generated by slather"
      end

      def self.details
        # Optional:
        # this is your chance to provide a more detailed description of this action
        "You can only use this action with slather and passing 'html: true' as parameter"
      end

      def self.available_options
        # Define all options your action supports.

        # Below a few examples
        [
          FastlaneCore::ConfigItem.new(key: :filename,
                                       env_name: "FL_SLATHERPERCENTAGE_FILENAME",
                                       description: "Create a development certificate instead of a distribution one",
                                       is_string: false, # true: verifies the input is a string, false: every kind of value
                                       default_value: "") # the default value if the user didn't provide one
        ]
      end

      def self.output
        # Define the shared values you are going to provide
        # Example
        [
          ['CODE_COVERAGE', 'This value contains the string of code coverage of your project']
        ]
      end

      def self.authors
        # So no one will ever forget your contribution to fastlane :) You are awesome btw!
        ["https://github.com/cs-joao-souza"]
      end

      def self.is_supported?(platform)
        # you can do things like
        #
        #  true
        #
        #  platform == :ios
        #
        #  [:ios, :mac].include?(platform)
        #

        platform == :ios
      end
    end
  end
end
